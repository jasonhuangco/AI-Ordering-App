import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { getAllOrders } from '@/lib/supabase-admin'
import { generateOrderNumber } from '@/lib/orderUtils'

export async function GET(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session || session.user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { searchParams } = new URL(request.url)
    const limit = parseInt(searchParams.get('limit') || '20')
    const page = parseInt(searchParams.get('page') || '1')
    const userId = searchParams.get('userId')
    const skip = (page - 1) * limit

    // Build the where clause based on filters
    const where: any = {}
    if (userId) {
      where.userId = userId
    }

    const orders = await prisma.order.findMany({
      where,
      include: {
        user: {
          select: {
            id: true,
            email: true,
            companyName: true,
            contactName: true,
            phone: true,
            address: true,
            customerCode: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                id: true,
                name: true,
                description: true,
                category: true,
                unit: true
              }
            }
          }
        }
      },
      orderBy: {
        createdAt: 'desc'
      },
      take: limit,
      skip: skip
    })

    const totalOrders = userId 
      ? await prisma.order.count({ where })
      : await prisma.order.count()

    return NextResponse.json({
      orders,
      pagination: {
        total: totalOrders,
        page,
        limit,
        totalPages: Math.ceil(totalOrders / limit)
      }
    })
  } catch (error) {
    console.error('Error fetching admin orders:', error)
    return NextResponse.json(
      { error: 'Failed to fetch orders' },
      { status: 500 }
    )
  }
}

export async function POST(request: NextRequest) {
  try {
    const session = await getServerSession(authOptions)
    
    if (!session || session.user.role !== 'ADMIN') {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    const { customerId, items, notes } = await request.json()

    // Validate request
    if (!customerId || !items || items.length === 0) {
      return NextResponse.json(
        { error: 'Customer and items are required' },
        { status: 400 }
      )
    }

    // Verify customer exists and has customerCode
    const customer = await prisma.user.findUnique({
      where: { id: customerId },
      select: { id: true, customerCode: true, email: true }
    })

    if (!customer) {
      return NextResponse.json(
        { error: 'Customer not found' },
        { status: 404 }
      )
    }

    if (!customer.customerCode) {
      return NextResponse.json(
        { error: 'Customer does not have a customer code assigned' },
        { status: 400 }
      )
    }

    // Verify all products exist and calculate total
    const productIds = items.map((item: { productId: string, quantity: number }) => item.productId)
    const products = await prisma.product.findMany({
      where: { 
        id: { in: productIds },
        isActive: true
      }
    })

    if (products.length !== productIds.length) {
      return NextResponse.json(
        { error: 'One or more products not found or inactive' },
        { status: 400 }
      )
    }

    // Calculate total
    let total = 0
    const orderItemsWithPrice = items.map((item: { productId: string, quantity: number }) => {
      const product = products.find((p: any) => p.id === item.productId)
      if (!product) throw new Error('Product not found')
      
      const price = product.price
      const quantity = item.quantity
      total += price * quantity
      
      return {
        productId: item.productId,
        quantity,
        price
      }
    })

    // Get the next sequence number
    const lastOrder = await prisma.order.findFirst({
      orderBy: {
        sequenceNumber: 'desc'
      },
      select: {
        sequenceNumber: true
      }
    })

    const nextSequenceNumber = (lastOrder?.sequenceNumber || 0) + 1

    // Create the order
    const order = await prisma.order.create({
      data: {
        userId: customerId,
        sequenceNumber: nextSequenceNumber,
        total,
        status: 'PENDING',
        notes,
        items: {
          create: orderItemsWithPrice
        }
      },
      include: {
        user: {
          select: {
            id: true,
            email: true,
            companyName: true,
            contactName: true,
            phone: true,
            customerCode: true
          }
        },
        items: {
          include: {
            product: {
              select: {
                name: true,
                category: true,
                unit: true
              }
            }
          }
        }
      }
    })

    return NextResponse.json(order, { status: 201 })
  } catch (error) {
    console.error('Error creating admin order:', error)
    return NextResponse.json(
      { error: 'Failed to create order' },
      { status: 500 }
    )
  }
}
